// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-12-31 10:28:22.1484699 +0800 CST m=+0.027329401

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/questions": {
            "get": {
                "description": "list all questions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions API"
                ],
                "summary": "ListQuestions",
                "responses": {
                    "200": {
                        "description": "the result question data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/app.Question"
                            }
                        }
                    },
                    "500": {
                        "description": "error messages",
                        "schema": {
                            "$ref": "#/definitions/app.ErrorResult"
                        }
                    }
                }
            },
            "post": {
                "description": "create a question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions API"
                ],
                "summary": "CreateQuestion",
                "parameters": [
                    {
                        "description": "question content",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/Question"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "the created question data",
                        "schema": {
                            "$ref": "#/definitions/app.Question"
                        }
                    },
                    "500": {
                        "description": "error messages",
                        "schema": {
                            "$ref": "#/definitions/app.ErrorResult"
                        }
                    }
                }
            }
        },
        "/questions/{id}": {
            "get": {
                "description": "get one question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions API"
                ],
                "summary": "GetQuestion",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "question id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the result question data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/app.Question"
                            }
                        }
                    },
                    "500": {
                        "description": "error messages",
                        "schema": {
                            "$ref": "#/definitions/app.ErrorResult"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "app.ErrorResult": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "app.Question": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "localhost:8080",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Iwantoask API",
	Description: "This is a simple questioning application",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
